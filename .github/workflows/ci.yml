name: DocWeaver CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-extension:
    name: Validate Extension
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate extension structure
      run: |
        echo "🔍 Validating extension structure..."
        test -f manifest.json || (echo "❌ manifest.json missing" && exit 1)
        test -f background/service-worker.js || (echo "❌ background/service-worker.js missing" && exit 1)
        test -f content/content-script.js || (echo "❌ content/content-script.js missing" && exit 1)
        test -f popup/popup.html || (echo "❌ popup/popup.html missing" && exit 1)
        test -f popup/popup.js || (echo "❌ popup/popup.js missing" && exit 1)
        test -f sidebar/sidebar.html || (echo "❌ sidebar/sidebar.html missing" && exit 1)
        test -f sidebar/sidebar.js || (echo "❌ sidebar/sidebar.js missing" && exit 1)
        test -f print/print.html || (echo "❌ print/print.html missing" && exit 1)
        test -f print/print.js || (echo "❌ print/print.js missing" && exit 1)
        echo "✅ Extension structure is valid"
        
    - name: Validate manifest.json
      run: |
        echo "🔍 Validating manifest.json..."
        python3 -c "
        import json
        import sys
        try:
            with open('manifest.json', 'r') as f:
                manifest = json.load(f)
            print('✅ manifest.json is valid JSON')
            print(f'📦 Extension: {manifest.get(\"name\", \"Unknown\")}')
            print(f'📝 Version: {manifest.get(\"version\", \"Unknown\")}')
            print(f'🔧 Manifest version: {manifest.get(\"manifest_version\", \"Unknown\")}')
        except Exception as e:
            print(f'❌ manifest.json validation failed: {e}')
            sys.exit(1)
        "
        
    - name: Test JavaScript syntax
      run: |
        echo "🔍 Testing JavaScript syntax..."
        node -c background/service-worker.js && echo "✅ background/service-worker.js"
        node -c content/content-script.js && echo "✅ content/content-script.js"
        node -c content/selector.js && echo "✅ content/selector.js"
        node -c sidebar/sidebar.js && echo "✅ sidebar/sidebar.js"
        node -c popup/popup.js && echo "✅ popup/popup.js"
        node -c print/print.js && echo "✅ print/print.js"
        echo "✅ All JavaScript files are syntactically valid"

  build-extension:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: validate-extension
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create extension package
      run: |
        echo "📦 Creating extension package..."
        mkdir -p dist
        zip -r dist/docweaver-extension.zip . \
          -x "*.git*" "node_modules/*" "*.md" ".github/*" "test/*" "*.log" ".qodo/*" "api/*" "docs/*" "requirements.txt" "mkdocs.yml"
        echo "✅ Extension package created"
        
    - name: Upload extension package
      uses: actions/upload-artifact@v4
      with:
        name: docweaver-extension
        path: dist/docweaver-extension.zip

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-extension
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        echo "🔒 Running security audit..."
        # Check for common security issues
        if grep -r "eval(" . --include="*.js" --exclude-dir=node_modules; then
          echo "❌ Found eval() usage - security risk"
          exit 1
        fi
        
        if grep -r "innerHTML" . --include="*.js" --exclude-dir=node_modules | grep -v "sanitize"; then
          echo "⚠️  Found innerHTML usage - review for XSS"
        fi
        
        echo "✅ Security scan completed"

  deploy:
    name: Deploy to GitHub Releases
    runs-on: ubuntu-latest
    needs: [validate-extension, build-extension, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download extension package
      uses: actions/download-artifact@v4
      with:
        name: docweaver-extension
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: docweaver-extension.zip
        tag_name: v${{ github.run_number }}
        name: DocWeaver Extension v${{ github.run_number }}
        body: |
          ## DocWeaver Browser Extension
          
          ### What's New
          - Enhanced UI with smooth animations
          - Sound effects for better user feedback
          - Improved content extraction
          - Cross-browser compatibility
          - Hide/show FAB functionality
          - Enhanced sidebar management
          
          ### Installation
          1. Download the extension package
          2. Extract the ZIP file
          3. Load the extension in your browser:
             - Chrome: chrome://extensions/ → Load unpacked
             - Firefox: about:debugging → Load temporary add-on
             - Edge: edge://extensions/ → Load unpacked
          
          ### Features
          - 📄 Full page capture
          - ✂️ Smart selection mode
          - 📝 Article-only extraction
          - 💻 Code-only capture
          - 📚 Collection management
          - ✨ Beautiful PDF generation
          - 👁️‍🗨️ Hide/show FAB
          - 🎵 Sound effects
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
