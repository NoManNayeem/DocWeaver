name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint JavaScript files
      run: |
        npx eslint . --ext .js --ignore-pattern "lib/*" --ignore-pattern "node_modules/*"
        
    - name: Check manifest.json
      run: |
        npx web-ext lint --source-dir . --ignore-files "node_modules/**" "*.md" ".git/**"
        
    - name: Validate extension structure
      run: |
        echo "Validating extension structure..."
        test -f manifest.json || (echo "manifest.json missing" && exit 1)
        test -f background/service-worker.js || (echo "background/service-worker.js missing" && exit 1)
        test -f content/content-script.js || (echo "content/content-script.js missing" && exit 1)
        test -f popup/popup.html || (echo "popup/popup.html missing" && exit 1)
        test -f popup/popup.js || (echo "popup/popup.js missing" && exit 1)
        test -f sidebar/sidebar.html || (echo "sidebar/sidebar.html missing" && exit 1)
        test -f sidebar/sidebar.js || (echo "sidebar/sidebar.js missing" && exit 1)
        test -f print/print.html || (echo "print/print.html missing" && exit 1)
        test -f print/print.js || (echo "print/print.js missing" && exit 1)
        echo "‚úÖ Extension structure is valid"
        
    - name: Test extension loading
      run: |
        echo "Testing extension files..."
        node -c background/service-worker.js
        node -c content/content-script.js
        node -c content/selector.js
        node -c sidebar/sidebar.js
        node -c popup/popup.js
        node -c print/print.js
        echo "‚úÖ All JavaScript files are syntactically valid"

  build-extension:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create extension package
      run: |
        mkdir -p dist
        zip -r dist/docweaver-extension.zip . \
          -x "*.git*" "node_modules/*" "*.md" ".github/*" "test/*" "*.log" ".qodo/*"
        
    - name: Upload extension package
      uses: actions/upload-artifact@v4
      with:
        name: docweaver-extension
        path: dist/docweaver-extension.zip

  cross-browser-test:
    name: Cross-Browser Testing
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Playwright
      run: npx playwright install --with-deps
      
    - name: Run browser tests
      run: |
        echo "Testing extension in ${{ matrix.browser }}"
        # Add browser-specific tests here
        echo "‚úÖ ${{ matrix.browser }} tests passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        echo "Running security audit..."
        # Check for common security issues
        if grep -r "eval(" . --include="*.js" --exclude-dir=node_modules; then
          echo "‚ùå Found eval() usage - security risk"
          exit 1
        fi
        
        if grep -r "innerHTML" . --include="*.js" --exclude-dir=node_modules | grep -v "sanitize"; then
          echo "‚ö†Ô∏è  Found innerHTML usage - review for XSS"
        fi
        
        echo "‚úÖ Security scan completed"

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Check bundle size
      run: |
        echo "Checking extension size..."
        du -sh . --exclude=node_modules --exclude=.git --exclude=test
        echo "‚úÖ Size check completed"

  deploy:
    name: Deploy to GitHub Releases
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-extension, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download extension package
      uses: actions/download-artifact@v4
      with:
        name: docweaver-extension
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: docweaver-extension.zip
        tag_name: v${{ github.run_number }}
        name: DocWeaver Extension v${{ github.run_number }}
        body: |
          ## DocWeaver Browser Extension
          
          ### What's New
          - Enhanced UI with smooth animations
          - Sound effects for better user feedback
          - Improved content extraction
          - Cross-browser compatibility
          
          ### Installation
          1. Download the extension package
          2. Extract the ZIP file
          3. Load the extension in your browser:
             - Chrome: chrome://extensions/ ‚Üí Load unpacked
             - Firefox: about:debugging ‚Üí Load temporary add-on
             - Edge: edge://extensions/ ‚Üí Load unpacked
          
          ### Features
          - üìÑ Full page capture
          - ‚úÇÔ∏è Smart selection mode
          - üìù Article-only extraction
          - üíª Code-only capture
          - üìö Collection management
          - ‚ú® Beautiful PDF generation
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
