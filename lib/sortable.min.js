// SortableJS - Minimal implementation for DocWeaver
// Simple drag and drop functionality

(function() {
  'use strict';
  
  // Simple Sortable implementation
  const Sortable = function(container, options) {
    this.container = container;
    this.options = options || {};
    this.draggedElement = null;
    this.init();
  };
  
  Sortable.prototype = {
    init: function() {
      this.container.addEventListener('mousedown', this.handleMouseDown.bind(this));
      document.addEventListener('mousemove', this.handleMouseMove.bind(this));
      document.addEventListener('mouseup', this.handleMouseUp.bind(this));
    },
    
    handleMouseDown: function(e) {
      const item = e.target.closest('[draggable]') || e.target.closest('.page-item');
      if (!item) return;
      
      this.draggedElement = item;
      item.style.opacity = '0.5';
      item.style.cursor = 'grabbing';
      
      // Add dragging class
      if (this.options.dragClass) {
        item.classList.add(this.options.dragClass);
      }
    },
    
    handleMouseMove: function(e) {
      if (!this.draggedElement) return;
      
      e.preventDefault();
      
      // Simple visual feedback
      const rect = this.container.getBoundingClientRect();
      const y = e.clientY - rect.top;
      
      // Find insertion point
      const items = Array.from(this.container.children);
      let insertIndex = items.length;
      
      for (let i = 0; i < items.length; i++) {
        const itemRect = items[i].getBoundingClientRect();
        if (y < itemRect.top + itemRect.height / 2) {
          insertIndex = i;
          break;
        }
      }
      
      // Visual feedback
      items.forEach((item, index) => {
        if (index === insertIndex) {
          item.style.borderTop = '2px solid #6366F1';
        } else {
          item.style.borderTop = 'none';
        }
      });
    },
    
    handleMouseUp: function(e) {
      if (!this.draggedElement) return;
      
      const oldIndex = Array.from(this.container.children).indexOf(this.draggedElement);
      const newIndex = this.getNewIndex(e);
      
      if (oldIndex !== newIndex && this.options.onEnd) {
        this.options.onEnd({
          oldIndex: oldIndex,
          newIndex: newIndex,
          item: this.draggedElement
        });
      }
      
      // Reset styles
      this.draggedElement.style.opacity = '';
      this.draggedElement.style.cursor = '';
      this.draggedElement.style.borderTop = 'none';
      
      if (this.options.dragClass) {
        this.draggedElement.classList.remove(this.options.dragClass);
      }
      
      this.draggedElement = null;
    },
    
    getNewIndex: function(e) {
      const items = Array.from(this.container.children);
      const rect = this.container.getBoundingClientRect();
      const y = e.clientY - rect.top;
      
      for (let i = 0; i < items.length; i++) {
        const itemRect = items[i].getBoundingClientRect();
        if (y < itemRect.top + itemRect.height / 2) {
          return i;
        }
      }
      
      return items.length;
    }
  };
  
  // Make Sortable available globally
  if (typeof window !== 'undefined') {
    window.Sortable = Sortable;
  }
  
  // Export for module systems
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Sortable;
  }
  
  console.log('SortableJS polyfill loaded');
  
})();
