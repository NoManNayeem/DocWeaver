// Highlight.js - Syntax highlighting library
// Minimal implementation for DocWeaver

(function() {
  'use strict';
  
  // Simple syntax highlighter for common languages
  const hljs = {
    highlightElement: function(element) {
      if (!element || !element.textContent) return;
      
      const code = element.textContent;
      const language = this.detectLanguage(code);
      const highlighted = this.highlight(code, language);
      
      element.innerHTML = highlighted;
      element.classList.add('hljs');
    },
    
    highlight: function(code, language) {
      // Simple highlighting based on language
      switch (language) {
        case 'javascript':
        case 'js':
          return this.highlightJavaScript(code);
        case 'python':
        case 'py':
          return this.highlightPython(code);
        case 'html':
          return this.highlightHTML(code);
        case 'css':
          return this.highlightCSS(code);
        case 'json':
          return this.highlightJSON(code);
        default:
          return this.escapeHtml(code);
      }
    },
    
    detectLanguage: function(code) {
      // Simple language detection
      if (code.includes('function') && code.includes('(') && code.includes(')')) {
        return 'javascript';
      }
      if (code.includes('def ') && code.includes(':')) {
        return 'python';
      }
      if (code.includes('<') && code.includes('>')) {
        return 'html';
      }
      if (code.includes('{') && code.includes('}') && code.includes(':')) {
        return 'css';
      }
      if (code.includes('{') && code.includes('}') && code.includes('"')) {
        return 'json';
      }
      return 'text';
    },
    
    highlightJavaScript: function(code) {
      return code
        .replace(/\b(function|const|let|var|if|else|for|while|return|class|import|export|from|async|await)\b/g, '<span class="hljs-keyword">$1</span>')
        .replace(/\b(true|false|null|undefined)\b/g, '<span class="hljs-literal">$1</span>')
        .replace(/"([^"]*)"/g, '<span class="hljs-string">"$1"</span>')
        .replace(/'([^']*)'/g, '<span class="hljs-string">\'$1\'</span>')
        .replace(/\/\/.*$/gm, '<span class="hljs-comment">$&</span>')
        .replace(/\/\*[\s\S]*?\*\//g, '<span class="hljs-comment">$&</span>');
    },
    
    highlightPython: function(code) {
      return code
        .replace(/\b(def|class|if|else|elif|for|while|import|from|return|try|except|finally|with|as|lambda)\b/g, '<span class="hljs-keyword">$1</span>')
        .replace(/\b(True|False|None)\b/g, '<span class="hljs-literal">$1</span>')
        .replace(/"([^"]*)"/g, '<span class="hljs-string">"$1"</span>')
        .replace(/'([^']*)'/g, '<span class="hljs-string">\'$1\'</span>')
        .replace(/#.*$/gm, '<span class="hljs-comment">$&</span>');
    },
    
    highlightHTML: function(code) {
      return code
        .replace(/&lt;([^&gt;]+)&gt;/g, '<span class="hljs-tag">&lt;$1&gt;</span>')
        .replace(/&lt;\/?([a-zA-Z][a-zA-Z0-9]*)/g, '<span class="hljs-tag">&lt;/$1</span>')
        .replace(/&lt;!--[\s\S]*?--&gt;/g, '<span class="hljs-comment">$&</span>');
    },
    
    highlightCSS: function(code) {
      return code
        .replace(/([a-zA-Z-]+)\s*:/g, '<span class="hljs-attr">$1</span>:')
        .replace(/#[a-fA-F0-9]{3,6}/g, '<span class="hljs-number">$&</span>')
        .replace(/\b\d+(\.\d+)?(px|em|rem|%|vh|vw)\b/g, '<span class="hljs-number">$&</span>')
        .replace(/\/\*[\s\S]*?\*\//g, '<span class="hljs-comment">$&</span>');
    },
    
    highlightJSON: function(code) {
      return code
        .replace(/"([^"]*)":/g, '<span class="hljs-attr">"$1"</span>:')
        .replace(/: "([^"]*)"/g, ': <span class="hljs-string">"$1"</span>')
        .replace(/\b(true|false|null)\b/g, '<span class="hljs-literal">$1</span>')
        .replace(/\b\d+\b/g, '<span class="hljs-number">$&</span>');
    },
    
    escapeHtml: function(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  };
  
  // Make hljs available globally
  if (typeof window !== 'undefined') {
    window.hljs = hljs;
  }
  
  // Export for module systems
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = hljs;
  }
  
  // Default export for ES6 modules
  if (typeof window !== 'undefined') {
    window.hljs = hljs;
  }
  
})();
