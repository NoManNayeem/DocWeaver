// Readability.js - Minimal implementation for DocWeaver
// Simple article extraction

(function() {
  'use strict';
  
  // Simple Readability implementation
  const Readability = function(doc) {
    this.doc = doc;
  };
  
  Readability.prototype = {
    parse: function() {
      const article = this.extractArticle();
      if (!article) return null;
      
      return {
        title: this.extractTitle(),
        content: article.innerHTML,
        byline: this.extractByline(),
        excerpt: this.extractExcerpt(article)
      };
    },
    
    extractArticle: function() {
      // Try to find main content area
      const selectors = [
        'main',
        'article',
        '[role="main"]',
        '.content',
        '.post',
        '.entry',
        '.article'
      ];
      
      for (const selector of selectors) {
        const element = this.doc.querySelector(selector);
        if (element && this.isValidContent(element)) {
          return element.cloneNode(true);
        }
      }
      
      // Fallback to body
      return this.doc.body.cloneNode(true);
    },
    
    isValidContent: function(element) {
      const text = element.textContent.trim();
      return text.length > 200; // Minimum content length
    },
    
    extractTitle: function() {
      // Try different title sources
      const titleSelectors = [
        'h1',
        '.title',
        '.post-title',
        '.entry-title',
        'title'
      ];
      
      for (const selector of titleSelectors) {
        const element = this.doc.querySelector(selector);
        if (element && element.textContent.trim()) {
          return element.textContent.trim();
        }
      }
      
      return this.doc.title || 'Untitled';
    },
    
    extractByline: function() {
      const bylineSelectors = [
        '.author',
        '.byline',
        '.post-author',
        '[rel="author"]'
      ];
      
      for (const selector of bylineSelectors) {
        const element = this.doc.querySelector(selector);
        if (element && element.textContent.trim()) {
          return element.textContent.trim();
        }
      }
      
      return null;
    },
    
    extractExcerpt: function(article) {
      const text = article.textContent.trim();
      return text.substring(0, 200) + (text.length > 200 ? '...' : '');
    }
  };
  
  // Make Readability available globally
  if (typeof window !== 'undefined') {
    window.Readability = Readability;
  }
  
  // Export for module systems
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Readability;
  }
  
  console.log('Readability.js polyfill loaded');
  
})();
